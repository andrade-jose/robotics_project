from rtde_control import RTDEControlInterface
from rtde_receive import RTDEReceiveInterface
from config.config_completa import ConfigRobo
from services.pose_validation_service import PoseValidationService
from diagnostics.ur_diagnostics import URDiagnostics
import time
import math
import logging

class URController:
    def __init__(self, config: ConfigRobo):
        self.config = config
        self.rtde_c = RTDEControlInterface(self.config.ip)
        self.rtde_r = RTDEReceiveInterface(self.config.ip)

        self.enable_safety_validation = True
        self.max_movement_distance = self.config.distancia_maxima_movimento
        self.workspace_limits = self.config.limites_workspace
        self.speed = self.config.velocidade_normal
        self.acceleration = self.config.aceleracao_normal
        self.pause_between_moves = self.config.pausa_entre_movimentos
        self.validation_retries = self.config.max_tentativas_correcao
        self.em_movimento = False

        # Sistema de valida√ß√£o centralizado
        self.logger = logging.getLogger('URController')
        self.pose_validator = PoseValidationService(
            workspace_limits=self.workspace_limits,
            max_movement_distance=self.max_movement_distance,
            logger=self.logger
        )
        self.pose_validator.set_ur_controller(self)

        # Sistema de diagn√≥sticos
        self.diagnostics = URDiagnostics(config=self.config, logger=self.logger)

        print(f"‚úÖ Conectado ao rob√¥ UR em {self.config.ip}")

    def is_connected(self):
        """Verifica se est√° conectado ao rob√¥"""
        return (self.rtde_c and self.rtde_r and self.rtde_c.isConnected())

    def validate_pose_safety_limits(self, pose):
        """
        üî• NOVA FUN√á√ÉO: Usa isPoseWithinSafetyLimits() da biblioteca ur_rtde
        Valida se a pose est√° dentro dos limites de seguran√ßa definidos no rob√¥
        """
        if not self.enable_safety_validation:
            return True
            
        if not self.is_connected():
            print("‚ùå Rob√¥ n√£o conectado para valida√ß√£o")
            return False
            
        try:
            # Usar a fun√ß√£o oficial da biblioteca ur_rtde
            is_safe = self.rtde_c.isPoseWithinSafetyLimits(pose)
            
            if is_safe:
                print(f"‚úÖ Pose APROVADA nos limites de seguran√ßa: {[f'{p:.3f}' for p in pose]}")
            else:
                print(f"‚ùå Pose REJEITADA pelos limites de seguran√ßa: {[f'{p:.3f}' for p in pose]}")
                
            return is_safe
            
        except Exception as e:
            print(f"‚ùå Erro na valida√ß√£o de limites de seguran√ßa: {e}")
            return False
        

    def diagnostic_pose_rejection(self, pose):
        """
        Diagn√≥stico avan√ßado: identifica exatamente por que a pose foi rejeitada.
        DELEGA para URDiagnostics.
        """
        return self.diagnostics.diagnostic_pose_rejection(
            pose=pose,
            rtde_c=self.rtde_c,
            get_current_joints_func=self.get_current_joints
        )

    def validate_pose_reachability(self, pose):
        """
        ‚ö†Ô∏è DEPRECATED: Use pose_validator.validate_reachability() diretamente.

        Valida√ß√£o de alcan√ßabilidade.
        Mantido para compatibilidade retroativa.
        """
        try:
            # Verificar se a pose tem formato correto
            if len(pose) != 6:
                print(f"‚ùå Formato de pose inv√°lido: deve ter 6 elementos, recebeu {len(pose)}")
                return False
                
            # Obter pose atual para calcular dist√¢ncia
            current_pose = self.get_current_pose()
            if not current_pose:
                print("‚ùå N√£o foi poss√≠vel obter pose atual")
                return False
                
            # Calcular dist√¢ncia euclidiana do movimento
            distance = math.sqrt(
                (pose[0] - current_pose[0])**2 +
                (pose[1] - current_pose[1])**2 +
                (pose[2] - current_pose[2])**2
            )
            
            # Verificar se a dist√¢ncia n√£o √© muito grande
            if distance > self.max_movement_distance:
                print(f"‚ùå Movimento muito grande: {distance:.3f}m > {self.max_movement_distance}m")
                return False
                
            # Verificar se as orienta√ß√µes n√£o s√£o extremas
            rotation_magnitude = math.sqrt(pose[3]**2 + pose[4]**2 + pose[5]**2)
            if rotation_magnitude > math.pi:
                print(f"‚ùå Magnitude de rota√ß√£o extrema: {rotation_magnitude:.3f} > œÄ")
                return False
                
            print(f"‚úÖ Pose alcan√ß√°vel - Dist√¢ncia: {distance:.3f}m, Rota√ß√£o: {rotation_magnitude:.3f}rad")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na valida√ß√£o de alcan√ßabilidade: {e}")
            return False

    def validate_pose_complete(self, pose):
        """
        Executa valida√ß√£o completa usando PoseValidationService.

        Args:
            pose: Lista [x, y, z, rx, ry, rz]

        Returns:
            bool: True se pose √© v√°lida
        """
        if not self.enable_safety_validation:
            return True

        # Obter pose atual para valida√ß√£o de alcan√ßabilidade
        current_pose = self.get_current_pose()

        # Executar valida√ß√£o completa
        result = self.pose_validator.validate_complete(pose, current_pose)

        # Retornar resultado simples
        return result.is_valid

    def validate_pose(self, pose):
        """
        ‚ö†Ô∏è DEPRECATED: Use pose_validator.validate_workspace() diretamente.

        Valida se a pose est√° dentro dos limites do workspace.
        Mantido para compatibilidade retroativa.

        Pose format: [x, y, z, rx, ry, rz] onde:
        - x, y, z em metros
        - rx, ry, rz em radianos (angle-axis representation)
        """
        if len(pose) != 6:
            print(f"‚ùå Pose inv√°lida: deve ter 6 elementos, recebeu {len(pose)}")
            return False
            
        x, y, z, rx, ry, rz = pose
        
        # Validar posi√ß√£o cartesiana
        if not (self.workspace_limits['x_min'] <= x <= self.workspace_limits['x_max']):
            print(f"‚ùå X fora dos limites: {x} (min: {self.workspace_limits['x_min']}, max: {self.workspace_limits['x_max']})")
            return False
            
        if not (self.workspace_limits['y_min'] <= y <= self.workspace_limits['y_max']):
            print(f"‚ùå Y fora dos limites: {y} (min: {self.workspace_limits['y_min']}, max: {self.workspace_limits['y_max']})")
            return False
            
        if not (self.workspace_limits['z_min'] <= z <= self.workspace_limits['z_max']):
            print(f"‚ùå Z fora dos limites: {z} (min: {self.workspace_limits['z_min']}, max: {self.workspace_limits['z_max']})")
            return False
        
        # Validar orienta√ß√£o (angle-axis)
        rotation_magnitude = math.sqrt(rx**2 + ry**2 + rz**2)
        if rotation_magnitude > math.pi:
            print(f"‚ùå Magnitude de rota√ß√£o muito grande: {rotation_magnitude} > œÄ")
            return False
            
        print(f"‚úÖ Pose v√°lida no workspace: x={x:.3f}, y={y:.3f}, z={z:.3f}, rx={rx:.3f}, ry={ry:.3f}, rz={rz:.3f}")
        return True

    def get_current_pose(self):
        """Retorna a pose atual do TCP"""
        if self.is_connected():
            try:
                pose = self.rtde_r.getActualTCPPose()
                if pose:
                    print(f"üìç Pose atual: x={pose[0]:.3f}, y={pose[1]:.3f}, z={pose[2]:.3f}, "
                          f"rx={pose[3]:.3f}, ry={pose[4]:.3f}, rz={pose[5]:.3f}")
                return pose
            except Exception as e:
                print(f"‚ùå Erro ao obter pose atual: {e}")
                return None
        return None

    def getActualTCPPose(self):
        """Alias para compatibilidade"""
        return self.get_current_pose()

    def get_current_joints(self): 
        if self.is_connected():
            try:
                joints = self.rtde_r.getActualQ()
                if joints:
                    print(f"üîß Juntas atuais: {[f'{j:.3f}' for j in joints]}")
                return joints
            except Exception as e:
                print(f"‚ùå Erro ao obter juntas: {e}")
                return None
        return None

    def is_pose_reachable(self, target_pose):
        """
        üîÑ FUN√á√ÉO ATUALIZADA: Agora usa validate_pose_complete
        """
        return self.validate_pose_complete(target_pose)

    # SUBSTITUIR a fun√ß√£o correct_pose_automatically no URController

    def correct_pose_automatically(self, pose):
        """
        Corre√ß√£o inteligente de poses usando diagn√≥stico avan√ßado.

        RESPONSABILIDADE: Este m√©todo centraliza TODA a l√≥gica de corre√ß√£o de poses.
        √â usado por robot_service.fix_calibration_pose() e outros componentes.

        Estrat√©gias de corre√ß√£o:
        1. Diagn√≥stico completo da pose (cinem√°tica inversa, limites)
        2. Corre√ß√£o de articula√ß√µes fora dos limites
        3. Ajuste de singularidades (pequenos ajustes de orienta√ß√£o)
        4. Corre√ß√£o b√°sica de workspace (fallback)

        Args:
            pose: Lista [x, y, z, rx, ry, rz]

        Returns:
            pose_corrigida: Lista [x, y, z, rx, ry, rz] corrigida
        """
        print(f"üîß Iniciando corre√ß√£o INTELIGENTE da pose: {[f'{p:.3f}' for p in pose]}")
        
        # 1. DIAGN√ìSTICO COMPLETO
        diagnostics = self.diagnostic_pose_rejection(pose)
        
        if not diagnostics['pose_alcancavel']:
            print("‚ùå Pose imposs√≠vel cinematicamente - tentando corre√ß√µes b√°sicas")
            return self._correct_basic_workspace(pose)  # Fallback para m√©todo antigo
        
        corrected_pose = pose.copy()
        corrections_applied = []
        
        
        # 3. CORRE√á√ÉO: Articula√ß√µes problem√°ticas
        if diagnostics['joints_problematicas']:
            print("üîß Corrigindo articula√ß√µes fora dos limites...")
            
            joints = diagnostics['joints_calculadas'].copy()
            
            for joint_idx, name, valor, min_lim, max_lim in diagnostics['joints_problematicas']:
                # Corrigir articula√ß√£o para dentro dos limites
                if valor < min_lim:
                    joints[joint_idx] = min_lim + 0.05  # Margem de seguran√ßa
                    corrections_applied.append(f"{name}: {valor:.3f} ‚Üí {joints[joint_idx]:.3f} (limite m√≠n)")
                elif valor > max_lim:
                    joints[joint_idx] = max_lim - 0.05  # Margem de seguran√ßa  
                    corrections_applied.append(f"{name}: {valor:.3f} ‚Üí {joints[joint_idx]:.3f} (limite m√°x)")
            
            # Recalcular pose a partir das articula√ß√µes corrigidas
            try:
                new_pose = self.rtde_c.getForwardKinematics(joints)
                if new_pose:
                    corrected_pose = new_pose
                    corrections_applied.append("Pose recalculada a partir de articula√ß√µes corrigidas")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro na cinem√°tica direta: {e}")
        
        # 4. CORRE√á√ÉO: Singularidades
        if diagnostics['singularidades']:
            print("üîß Corrigindo singularidades...")
            
            # Ajustar orienta√ß√£o ligeiramente para sair da singularidade
            orientation_adjustments = [
                [0.05, 0, 0], [0, 0.05, 0], [0, 0, 0.05],
                [-0.05, 0, 0], [0, -0.05, 0], [0, 0, -0.05]
            ]
            
            for adjustment in orientation_adjustments:
                test_pose = corrected_pose.copy()
                test_pose[3] += adjustment[0]
                test_pose[4] += adjustment[1]  
                test_pose[5] += adjustment[2]
                
                # Testar se a nova orienta√ß√£o resolve o problema
                test_joints = self.rtde_c.getInverseKinematics(test_pose)
                if test_joints and self.rtde_c.isPoseWithinSafetyLimits(test_pose):
                    corrected_pose = test_pose
                    corrections_applied.append(f"Orienta√ß√£o ajustada: {adjustment}")
                    break
        
        # 5. CORRE√á√ÉO FINAL: Workspace b√°sico (mantida da vers√£o original)
        corrected_pose = self._correct_basic_workspace(corrected_pose)
        
        # 6. RELAT√ìRIO DE CORRE√á√ïES
        if corrections_applied:
            print("üîß Corre√ß√µes aplicadas:")
            for correction in corrections_applied:
                print(f"   ‚Ä¢ {correction}")
            print(f"üîß Pose final corrigida: {[f'{p:.3f}' for p in corrected_pose]}")
        else:
            print("üîß Nenhuma corre√ß√£o necess√°ria")
            
        return corrected_pose

    def _correct_basic_workspace(self, pose):
        """M√©todo auxiliar: corre√ß√µes b√°sicas de workspace (c√≥digo original)"""
        corrected_pose = pose.copy()
        corrections_applied = []
        
        x, y, z, rx, ry, rz = corrected_pose
        
        # Corrigir coordenadas para limites
        if x < self.workspace_limits['x_min']:
            corrected_pose[0] = self.workspace_limits['x_min'] + 0.01
            corrections_applied.append(f"X: {x:.3f} ‚Üí {corrected_pose[0]:.3f}")
        elif x > self.workspace_limits['x_max']:
            corrected_pose[0] = self.workspace_limits['x_max'] - 0.01
            corrections_applied.append(f"X: {x:.3f} ‚Üí {corrected_pose[0]:.3f}")
            
        if y < self.workspace_limits['y_min']:
            corrected_pose[1] = self.workspace_limits['y_min'] + 0.01
            corrections_applied.append(f"Y: {y:.3f} ‚Üí {corrected_pose[1]:.3f}")
        elif y > self.workspace_limits['y_max']:
            corrected_pose[1] = self.workspace_limits['y_max'] - 0.01
            corrections_applied.append(f"Y: {y:.3f} ‚Üí {corrected_pose[1]:.3f}")
            
        if z < self.workspace_limits['z_min']:
            corrected_pose[2] = self.workspace_limits['z_min'] + 0.01
            corrections_applied.append(f"Z: {z:.3f} ‚Üí {corrected_pose[2]:.3f}")
        elif z > self.workspace_limits['z_max']:
            corrected_pose[2] = self.workspace_limits['z_max'] - 0.01
            corrections_applied.append(f"Z: {z:.3f} ‚Üí {corrected_pose[2]:.3f}")

        # Corre√ß√£o de orienta√ß√£o
        rotation_magnitude = math.sqrt(rx**2 + ry**2 + rz**2)
        if rotation_magnitude > math.pi:
            factor = math.pi / rotation_magnitude * 0.95
            corrected_pose[3] = rx * factor
            corrected_pose[4] = ry * factor
            corrected_pose[5] = rz * factor
            corrections_applied.append(f"Rota√ß√£o normalizada")
            
        return corrected_pose


    def _apply_drastic_corrections(self, pose, original_pose):
        """NOVO: Corre√ß√µes dr√°sticas para poses imposs√≠veis"""
        print("üö® Aplicando corre√ß√µes DR√ÅSTICAS...")
        
        corrected = pose.copy()
        
        # 1. Mover para posi√ß√£o mais pr√≥xima do centro do workspace
        center_workspace = [0.4, 0.0, 0.3, 0.0, 3.14, 0.0]
        
        # Interpolar 50% em dire√ß√£o ao centro
        for i in range(3):  # Apenas posi√ß√£o, n√£o orienta√ß√£o
            corrected[i] = pose[i] * 0.5 + center_workspace[i] * 0.5
            
        # 2. Garantir altura m√≠nima segura
        min_safe_z = self.config.altura_base_ferro + self.config.margem_seguranca_base_ferro + 0.1
        if corrected[2] < min_safe_z:
            corrected[2] = min_safe_z
            
        print(f"üö® Pose drasticamente corrigida: {[f'{p:.3f}' for p in corrected]}")
        return corrected

    def _apply_alternative_corrections(self, pose, attempt_number):
        """NOVO: Estrat√©gias alternativas baseadas no n√∫mero da tentativa"""
        print(f"üîß Estrat√©gia alternativa #{attempt_number + 1}")
        
        corrected = pose.copy()
        
        if attempt_number == 0:
            # Tentativa 1: Elevar significativamente
            corrected[2] += 0.05
            print(f"üîß Elevando Z em 5cm: {corrected[2]:.3f}")
            
        elif attempt_number == 1:
            # Tentativa 2: Mover para posi√ß√£o mais central
            corrected[0] = 0.4  # X central
            corrected[1] = 0.0  # Y central
            corrected[2] = max(corrected[2], 0.3)  # Z seguro
            print(f"üîß Movendo para posi√ß√£o central segura")
            
        elif attempt_number == 2:
            # Tentativa 3: Orienta√ß√£o mais conservadora
            corrected[3] = 0.0   # rx = 0
            corrected[4] = 3.14  # ry = œÄ (TCP para baixo)
            corrected[5] = 0.0   # rz = 0
            print(f"üîß Orienta√ß√£o conservadora aplicada")
            
        else:
            # Tentativa final: Pose home modificada
            home_pose = self.config.pose_home.copy()
            home_pose[0] = pose[0]  # Manter X desejado
            home_pose[1] = pose[1]  # Manter Y desejado
            corrected = home_pose
            print(f"üîß Usando pose home modificada")
            
        return corrected

    def _poses_are_equal(self, pose1, pose2, tolerance=0.001):
        """AUXILIAR: Verifica se duas poses s√£o iguais dentro da toler√¢ncia"""
        for i in range(6):
            if abs(pose1[i] - pose2[i]) > tolerance:
                return False
        return True

    def move_with_intermediate_points(self, target_pose, speed=None, acceleration=None, num_points=3):
        """
        Movimento com pontos intermedi√°rios (waypoints) para trajetos longos.

        RESPONSABILIDADE: Este m√©todo centraliza a l√≥gica de movimento com waypoints.
        √â usado por robot_service.move_with_intermediate_points() e outros componentes.

        Estrat√©gia:
        1. Calcula pontos intermedi√°rios entre pose atual e pose alvo
        2. Executa movimento sequencial por cada ponto
        3. Usa interpola√ß√£o linear para gerar waypoints
        4. Aplica corre√ß√£o inteligente em cada ponto

        Args:
            target_pose: Lista [x, y, z, rx, ry, rz]
            speed: Velocidade do movimento (opcional, usa padr√£o se None)
            acceleration: Acelera√ß√£o do movimento (opcional, usa padr√£o se None)
            num_points: N√∫mero de pontos intermedi√°rios (padr√£o: 3)

        Returns:
            bool: True se movimento foi conclu√≠do com sucesso
        """
        if speed is None:
            speed = self.speed
        if acceleration is None:
            acceleration = self.acceleration
            
        print(f"üöÄ Movimento com {num_points} pontos intermedi√°rios")
        
        current_pose = self.get_current_pose()
        if not current_pose:
            print("‚ùå N√£o foi poss√≠vel obter pose atual")
            return False
            
        # Gerar pontos intermedi√°rios
        intermediate_poses = []
        for i in range(1, num_points + 1):
            factor = i / (num_points + 1)
            
            intermediate_pose = [
                current_pose[j] + (target_pose[j] - current_pose[j]) * factor
                for j in range(6)
            ]
            intermediate_poses.append(intermediate_pose)
            
        # Adicionar pose final
        intermediate_poses.append(target_pose)
        
        print(f"üìç Planejamento de {len(intermediate_poses)} pontos:")
        for i, pose in enumerate(intermediate_poses):
            print(f"   Ponto {i+1}: {[f'{p:.3f}' for p in pose]}")
            
        # Executar sequ√™ncia
        for i, pose in enumerate(intermediate_poses):
            print(f"\nüéØ Executando ponto {i+1}/{len(intermediate_poses)}")
            
            sucesso, pose_final = self.move_to_pose_with_smart_correction(pose, speed, acceleration)
            
            if not sucesso:
                print(f"‚ùå Falha no ponto {i+1} - movimento interrompido")
                return False
                
        print("‚úÖ Movimento com pontos intermedi√°rios conclu√≠do!")
        return True


    def enable_safety_mode(self, enable=True):
        """
        üî• NOVA FUN√á√ÉO: Liga/desliga valida√ß√µes de seguran√ßa
        """
        self.enable_safety_validation = enable
        status = "HABILITADA" if enable else "DESABILITADA"
        print(f"üõ°Ô∏è Valida√ß√£o de seguran√ßa {status}")

    def emergency_stop(self):
        """Parada de emerg√™ncia"""
        try:
            if self.rtde_c:
                self.rtde_c.stopScript()
                self.em_movimento = False
                print("üö® PARADA DE EMERG√äNCIA ATIVADA!")
                return True
        except Exception as e:
            print(f"‚ùå Erro na parada de emerg√™ncia: {e}")
            return False

    def stop(self):
        """Para movimentos atuais"""
        try:
            if self.rtde_c and self.em_movimento:
                # ‚úÖ ALTERAR para valor fixo ou adicionar campo na config:
                self.rtde_c.stopL(2.0)  # Desacelera√ß√£o fixa
                self.em_movimento = False
                print("üõë Rob√¥ parado com sucesso")
                return True
            return True
        except Exception as e:
            print(f"‚ùå Erro ao parar rob√¥: {e}")
            return False

    def set_speed_parameters(self, speed, acceleration):
        """Ajusta par√¢metros de velocidade"""
        self.speed = max(self.config.velocidade_minima, min(speed, self.config.velocidade_maxima))
        self.acceleration = max(self.config.aceleracao_minima, min(acceleration, self.config.aceleracao_maxima))

        print(f"‚öôÔ∏è Par√¢metros atualizados - Velocidade: {self.speed:.3f}, Acelera√ß√£o: {self.acceleration:.3f}")
    
    def get_robot_status(self):
        """Obt√©m status detalhado do rob√¥"""
        if not self.is_connected():
            return {"connected": False}
            
        try:
            status = {
                "connected": True,
                "pose": self.get_current_pose(),
                "joints": self.get_current_joints(),
                "em_movimento": self.em_movimento,
                "robot_mode": self.rtde_r.getRobotMode(),
                "safety_mode": self.rtde_r.getSafetyMode(),
                "safety_validation_enabled": self.enable_safety_validation
            }
            return status
        except Exception as e:
            print(f"‚ùå Erro ao obter status: {e}")
            return {"connected": False, "error": str(e)}

    def disconnect(self):
        """Desconecta do rob√¥"""
        try:
            if self.rtde_c:
                self.rtde_c.stopScript()
                print("üîå Desconectado do rob√¥")
            self.em_movimento = False
        except Exception as e:
            print(f"‚ùå Erro ao desconectar: {e}")

    # ====================== FUN√á√ïES DE DEBUG ======================
    
    def debug_movement_sequence(self, poses_list, test_only=False):
        """
        Debug de uma sequ√™ncia de movimentos.
        DELEGA para URDiagnostics.
        """
        test_func = self.test_pose_validation if test_only else self.move_to_pose_safe
        return self.diagnostics.debug_movement_sequence(poses_list, test_func, test_only)

    def _elevate_pose(self, pose, elevation):
        """AUXILIAR: Eleva a pose em Z. DELEGA para URDiagnostics."""
        return self.diagnostics.elevate_pose(pose, elevation)

    def _move_to_center(self, pose):
        """AUXILIAR: Move pose para posi√ß√£o mais central. DELEGA para URDiagnostics."""
        return self.diagnostics.move_to_center(pose)

    def benchmark_correction_system(self):
        """
        Benchmark do sistema de corre√ß√£o com v√°rias poses.
        DELEGA para URDiagnostics.
        """
        return self.diagnostics.benchmark_correction_system(
            rtde_c=self.rtde_c,
            correct_pose_func=self.correct_pose_automatically
        )

    # FUN√á√ÉO PARA USAR NO SEU CASO ESPEC√çFICO
    def fix_calibration_pose(self, position_index, target_pose):
        """
        üéØ CORRE√á√ÉO ESPEC√çFICA: Para usar na calibra√ß√£o
        Retorna a melhor pose corrigida para uma posi√ß√£o espec√≠fica
        """
        print(f"üéØ Corrigindo pose para posi√ß√£o {position_index}")
        
        # 1. Diagn√≥stico
        diagnostics = self.diagnostic_pose_rejection(target_pose)
        
        # 2. Se pose √© v√°lida, retornar original
        if self.rtde_c.isPoseWithinSafetyLimits(target_pose):
            print("‚úÖ Pose original j√° √© v√°lida")
            return target_pose, True
            
        # 3. Tentar corre√ß√£o autom√°tica
        corrected = self.correct_pose_automatically(target_pose)
        if self.rtde_c.isPoseWithinSafetyLimits(corrected):
            print("‚úÖ Corre√ß√£o autom√°tica funcionou")
            return corrected, True
            
        # 4. Estrat√©gias espec√≠ficas para calibra√ß√£o
        calibration_strategies = [
            ("Eleva√ß√£o +3cm", lambda p: self._elevate_pose(p, 0.03)),
            ("Eleva√ß√£o +5cm", lambda p: self._elevate_pose(p, 0.05)),
            ("Eleva√ß√£o +8cm", lambda p: self._elevate_pose(p, 0.08)),
            ("Posi√ß√£o mais central", self._move_to_center),
        ]
        
        for strategy_name, strategy_func in calibration_strategies:
            try:
                test_pose = strategy_func(target_pose)
                if self.rtde_c.isPoseWithinSafetyLimits(test_pose):
                    print(f"‚úÖ {strategy_name} funcionou")
                    return test_pose, True
            except Exception as e:
                continue
                
        print("‚ùå Nenhuma estrat√©gia funcionou para esta pose")
        return target_pose, False