"""
Main - Tapatan Rob√≥tico com Sistema de Vis√£o ArUco Integrado
===========================================================
Interface principal do jogo Tapatan com rob√¥ e vis√£o ArUco
Sistema completo para detec√ß√£o de marcadores, controle do rob√¥ e l√≥gica do jogo

ARQUITETURA REFATORADA:
- TapatanInterface: Coordenador principal (orquestra componentes)
- GameDisplay (ui/): Apresenta√ß√£o e visualiza√ß√£o
- MenuManager (ui/): Gerenciamento de menus e a√ß√µes
- VisionIntegration (integration/): Sistema de vis√£o ArUco
"""

# --- CORRE√á√ÉO UNICODE: Deve ser a primeira coisa no script ---
import sys
import codecs
if sys.stdout.encoding != 'utf-8':
    try:
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
    except (TypeError, AttributeError):
        # Em alguns ambientes (como IDEs), stdout/stderr podem n√£o ter um .buffer
        # ou o atributo pode ser somente leitura. A codifica√ß√£o nesses
        # ambientes geralmente j√° √© correta.
        pass
# --- Fim da corre√ß√£o ---

import time
import traceback
from typing import Optional

# Imports do sistema rob√≥tico
try:
    from services.game_orchestrator import TapatanOrchestrator
    from config.config_completa import ConfigRobo, ConfigJogo
except ImportError:
    print("AVISO: M√≥dulos 'services' ou 'config' n√£o encontrados. O programa n√£o funcionar√° corretamente.")
    # Classes placeholder para permitir que o script seja analisado sem erros
    class TapatanOrchestrator: pass
    class ConfigRobo: pass
    class ConfigJogo: pass

# Imports dos novos componentes refatorados
from ui.game_display import GameDisplay
from ui.menu_manager import MenuManager
from integration.vision_integration import VisionIntegration, VISION_AVAILABLE


class TapatanInterface:
    """
    Interface principal do jogo Tapatan com sistema de vis√£o ArUco integrado.

    RESPONSABILIDADE: Coordenar os componentes do sistema (n√£o implementar toda a l√≥gica).
    Delega para:
    - GameDisplay: Toda a apresenta√ß√£o visual
    - MenuManager: Gerenciamento de menus e a√ß√µes
    - VisionIntegration: Sistema de vis√£o
    - TapatanOrchestrator: L√≥gica do jogo e controle do rob√¥
    """

    def __init__(self):
        """Inicializa a interface principal (modo produ√ß√£o)."""
        # Configura√ß√µes
        self.config_robo = ConfigRobo()
        self.config_jogo = ConfigJogo()

        # Orquestrador do jogo
        try:
            self.orquestrador = TapatanOrchestrator(self.config_robo, self.config_jogo)
            print("‚úÖ Orquestrador do jogo inicializado.")
        except Exception as e:
            print(f"‚ùå Falha ao inicializar o Orquestrador: {e}")
            self.orquestrador = None

        # Componentes da UI e integra√ß√£o
        self.game_display = GameDisplay(vision_available=VISION_AVAILABLE)
        self.vision_integration = VisionIntegration() if VISION_AVAILABLE else None
        self.menu_manager = MenuManager(self.orquestrador, self.vision_integration)

        print("\nüéÆ TapatanInterface inicializada")
        if VISION_AVAILABLE:
            print("üìπ Sistema de vis√£o dispon√≠vel")
        else:
            print("‚ö†Ô∏è Sistema de vis√£o n√£o dispon√≠vel - continuar√° sem vis√£o")

    # ========== INICIALIZA√á√ÉO E FINALIZA√á√ÉO ==========

    def inicializar_sistema(self) -> bool:
        """Inicializa os componentes principais do sistema."""
        print("üöÄ Inicializando sistema Tapatan...")

        if not self.orquestrador:
            print("‚ùå Orquestrador n√£o foi criado. N√£o √© poss√≠vel inicializar.")
            return False

        try:
            if self.orquestrador.inicializar():
                print("‚úÖ Sistema rob√≥tico inicializado com sucesso!")
                return True
            else:
                print("‚ùå Falha na inicializa√ß√£o do sistema rob√≥tico!")
                return False
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False

    def finalizar_sistema(self):
        """Finaliza todos os sistemas de forma segura."""
        print("\nüîö Finalizando sistema...")

        if self.vision_integration and self.vision_integration.vision_active:
            self.vision_integration.parar_sistema_visao()

        if self.orquestrador:
            self.orquestrador.finalizar()

        print("‚úÖ Sistema finalizado!")

    # ========== EXECU√á√ÉO DA PARTIDA ==========

    def executar_partida(self):
        """
        Executa uma partida completa com sistema de vis√£o integrado.

        Coordena:
        1. Prepara√ß√£o do tabuleiro (se vis√£o dispon√≠vel)
        2. Inicializa√ß√£o da partida
        3. Loop principal do jogo
        4. Finaliza√ß√£o
        """
        if not self.orquestrador:
            print("‚ùå Orquestrador n√£o inicializado! Imposs√≠vel iniciar.")
            return

        print("\nüéÆ Iniciando nova partida...")

        # Prepara sistema de vis√£o se dispon√≠vel
        usar_visao = False
        if VISION_AVAILABLE and self.vision_integration:
            usar_visao = self.menu_manager.preparar_tabuleiro_com_visao()
            if not usar_visao and self.vision_integration.vision_active:
                # Se a prepara√ß√£o foi cancelada, para a vis√£o
                self.vision_integration.parar_sistema_visao()
                self.vision_integration.show_vision_window = False
                return

        # Inicia partida no orquestrador
        if not self.orquestrador.iniciar_partida():
            print("‚ùå Erro ao iniciar a partida no orquestrador!")
            if usar_visao:
                self.vision_integration.parar_sistema_visao()
            return

        # Loop principal da partida
        try:
            while True:
                estado_jogo = self.orquestrador.game_service.obter_estado_jogo()

                # Mostra tabuleiro (com ou sem vis√£o)
                if usar_visao:
                    estado_visao = self.vision_integration.obter_estado_visao()
                    self.game_display.mostrar_tabuleiro_com_visao(estado_jogo, estado_visao)
                else:
                    self.game_display.mostrar_tabuleiro(estado_jogo)

                self.game_display.mostrar_info_jogo(estado_jogo)

                # Verifica fim de jogo
                if estado_jogo['jogo_terminado']:
                    print("üéâ Jogo terminado!")
                    input("   Pressione ENTER para voltar ao menu...")
                    break

                # Turno do humano (jogador 2)
                if estado_jogo['jogador_atual'] == 2:
                    if usar_visao:
                        estado_visao = self.vision_integration.obter_estado_visao()
                        jogada = self.game_display.obter_jogada_humano_com_visao(estado_jogo, estado_visao)
                    else:
                        jogada = self.game_display.obter_jogada_humano(estado_jogo)

                    if jogada is None:
                        break

                    resultado = self.orquestrador.processar_jogada_humano(**jogada)

                    if not resultado['sucesso']:
                        print(f"   ‚ùå Erro: {resultado.get('mensagem', 'Jogada inv√°lida')}")
                        time.sleep(1)
                        continue

                    print("   ‚úÖ Sua jogada foi processada!")

                    # Se o rob√¥ respondeu imediatamente
                    if 'jogada_robo' in resultado:
                        jr = resultado['jogada_robo']['jogada']
                        if 'posicao' in jr:
                            print(f"   ü§ñ Rob√¥ respondeu colocando na pos {jr['posicao']}")
                        else:
                            print(f"   ü§ñ Rob√¥ respondeu movendo de {jr['origem']} para {jr['destino']}")
                        self.game_display.aguardar_confirmacao_robo()

                # Turno do rob√¥ (jogador 1)
                elif estado_jogo['jogador_atual'] == 1:
                    input("   ü§ñ Vez do rob√¥. Pressione ENTER para ele jogar...")
                    resultado = self.orquestrador.executar_jogada_robo()

                    if resultado['sucesso']:
                        j = resultado['jogada']
                        if 'posicao' in j:
                            print(f"   ü§ñ Rob√¥ colocou na posi√ß√£o {j['posicao']}")
                        else:
                            print(f"   ü§ñ Rob√¥ moveu de {j['origem']} para {j['destino']}")
                        self.game_display.aguardar_confirmacao_robo()
                    else:
                        print(f"‚ùå Erro na jogada do rob√¥: {resultado['mensagem']}")
                        break

        except KeyboardInterrupt:
            print("\n\nüõë Partida interrompida!")
        except Exception as e:
            print(f"\n‚ùå Erro fatal durante a partida: {e}")
            traceback.print_exc()
        finally:
            if usar_visao and self.vision_integration:
                # A vis√£o continua rodando durante o jogo, ent√£o paramos aqui
                self.vision_integration.parar_sistema_visao()
                self.vision_integration.show_vision_window = False

    # ========== PONTO DE ENTRADA ==========

    def executar(self):
        """Ponto de entrada principal da interface."""
        self.game_display.mostrar_banner()

        if self.inicializar_sistema():
            try:
                while True:
                    # Menu principal retorna True para iniciar partida, False para sair
                    deve_executar_partida = self.menu_manager.menu_principal()
                    if not deve_executar_partida:
                        break
                    self.executar_partida()

                print("\nüëã At√© logo!")

            except Exception as e:
                print(f"‚ùå Erro inesperado na execu√ß√£o: {e}")
                traceback.print_exc()
        else:
            print("‚ùå N√£o foi poss√≠vel inicializar o sistema!")

        self.finalizar_sistema()


class TapatanTestInterface(TapatanInterface):
    """
    Interface de teste que herda da principal para reutilizar c√≥digo
    e sobrep√µe apenas o necess√°rio para o modo de teste.
    """

    def __init__(self):
        """Inicializa a interface em modo de teste."""
        # Configura√ß√µes espec√≠ficas de teste
        self.config_robo = ConfigRobo()
        self.config_robo.pausa_entre_jogadas = 1.0
        self.config_robo.velocidade_padrao = 0.05
        self.config_robo.auto_calibrar = False

        self.config_jogo = ConfigJogo(profundidade_ia=3, debug_mode=True)

        # Orquestrador com configs de teste
        try:
            self.orquestrador = TapatanOrchestrator(self.config_robo, self.config_jogo)
            print("‚úÖ Orquestrador do jogo inicializado em MODO TESTE.")
        except Exception as e:
            print(f"‚ùå Falha ao inicializar o Orquestrador em MODO TESTE: {e}")
            self.orquestrador = None

        # Componentes da UI (sem vis√£o no modo teste)
        self.game_display = GameDisplay(vision_available=False)
        self.vision_integration = None
        self.menu_manager = MenuManager(self.orquestrador, None)

        print("üß™ TapatanTestInterface inicializada.")

    def mostrar_banner_teste(self):
        """Mostra o banner espec√≠fico para o modo de teste."""
        print("=" * 70)
        print("       üß™ TAPATAN ROB√ìTICO - MODO TESTE ü§ñ")
        print("=" * 70)
        print("  Testando movimenta√ß√£o e l√≥gica do jogo (SEM vis√£o)")
        print("=" * 70)

    def executar_partida(self):
        """Executa uma partida simplificada para testes, sem vis√£o."""
        if not self.orquestrador or not self.orquestrador.iniciar_partida():
            print("‚ùå Erro ao iniciar a partida de teste!")
            return

        print("\nüß™ Iniciando partida de teste (sem vis√£o)...")

        try:
            while True:
                estado_jogo = self.orquestrador.game_service.obter_estado_jogo()
                self.game_display.mostrar_tabuleiro(estado_jogo)
                self.game_display.mostrar_info_jogo(estado_jogo)

                if estado_jogo['jogo_terminado']:
                    print("üéâ Jogo de teste terminado!")
                    input("   Pressione ENTER para voltar ao menu...")
                    break

                if estado_jogo['jogador_atual'] == 2:
                    jogada = self.game_display.obter_jogada_humano(estado_jogo)
                    if jogada is None:
                        break

                    resultado = self.orquestrador.processar_jogada_humano(**jogada)
                    if not resultado['sucesso']:
                        print(f"   ‚ùå Erro: {resultado.get('mensagem', 'Jogada inv√°lida')}")
                        continue

                    print("   ‚úÖ Sua jogada foi processada!")
                    if 'jogada_robo' in resultado:
                        self.game_display.aguardar_confirmacao_robo()

                elif estado_jogo['jogador_atual'] == 1:
                    input("   ü§ñ Vez do rob√¥. Pressione ENTER para ele jogar...")
                    resultado = self.orquestrador.executar_jogada_robo()
                    if resultado['sucesso']:
                        self.game_display.aguardar_confirmacao_robo()
                    else:
                        print(f"‚ùå Erro na jogada do rob√¥: {resultado['mensagem']}")
                        break

        except KeyboardInterrupt:
            print("\n\nüõë Partida de teste interrompida!")
        except Exception as e:
            print(f"\n‚ùå Erro fatal na partida de teste: {e}")

    def executar(self):
        """Ponto de entrada para o modo de teste."""
        self.mostrar_banner_teste()

        if self.inicializar_sistema():
            try:
                while True:
                    deve_executar_partida = self.menu_manager.menu_principal()
                    if not deve_executar_partida:
                        break
                    self.executar_partida()

                print("\nüëã At√© logo!")

            except Exception as e:
                print(f"‚ùå Erro inesperado na execu√ß√£o: {e}")
                traceback.print_exc()
        else:
            print("‚ùå N√£o foi poss√≠vel inicializar o sistema!")

        self.finalizar_sistema()


def main():
    """Fun√ß√£o principal que decide qual interface instanciar."""
    if "--test" in sys.argv:
        print("üß™ Modo TESTE ativado")
        interface = TapatanTestInterface()
    else:
        print("üéÆ Modo PRODU√á√ÉO ativado")
        interface = TapatanInterface()

    try:
        interface.executar()
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrompido pelo usu√°rio!")
    except Exception as e:
        print(f"‚ùå Erro fatal e n√£o tratado na execu√ß√£o: {e}")
        traceback.print_exc()


if __name__ == "__main__":
    main()