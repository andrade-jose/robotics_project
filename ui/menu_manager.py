"""
MenuManager - Gerenciador de Menus e A√ß√µes do Sistema
======================================================
Respons√°vel por toda a interface de menu e a√ß√µes do sistema:
- Menu principal
- Calibra√ß√£o do rob√¥
- Testes do sistema de vis√£o
- Status do sistema
- Parada de emerg√™ncia
"""

import sys
import time
from typing import Optional, Callable, TYPE_CHECKING

if TYPE_CHECKING:
    from services.game_orchestrator import TapatanOrchestrator
    from integration.vision_integration import VisionIntegration

try:
    import cv2
    CV2_AVAILABLE = True
except ImportError:
    CV2_AVAILABLE = False


class MenuManager:
    """
    Gerencia o menu principal e todas as a√ß√µes do sistema.

    Responsabilidades:
    - Exibir menu principal e processar op√ß√µes
    - Executar calibra√ß√£o do sistema rob√≥tico
    - Testar sistema de vis√£o
    - Mostrar status completo
    - Parada de emerg√™ncia
    - Prepara√ß√£o do tabuleiro para partida
    """

    def __init__(self,
                 orquestrador: 'TapatanOrchestrator',
                 vision_integration: Optional['VisionIntegration'] = None):
        """
        Inicializa o gerenciador de menus.

        Args:
            orquestrador: Inst√¢ncia do orquestrador do jogo
            vision_integration: Inst√¢ncia do sistema de vis√£o (opcional)
        """
        self.orquestrador = orquestrador
        self.vision_integration = vision_integration

    # ========== MENU PRINCIPAL ==========

    def menu_principal(self) -> bool:
        """
        Exibe o menu principal e processa a escolha do usu√°rio.

        Returns:
            False quando o usu√°rio escolhe sair, True caso contr√°rio
        """
        while True:
            print("\n" + "=" * 50)
            print("           MENU PRINCIPAL - TAPATAN COM VIS√ÉO")
            print("=" * 50)
            print("  1. üöÄ Iniciar nova partida")
            print("  2. üîß Calibrar sistema rob√≥tico")
            print("  3. üìπ Testar sistema de vis√£o")
            print("  4. üìä Ver status do sistema")
            print("  5. üö® Parada de emerg√™ncia")
            print("  6. üëã Sair")
            print("=" * 50)

            try:
                opcao = input("   Escolha uma op√ß√£o: ").strip()

                if opcao == "1":
                    return True  # Sinaliza que deve executar partida
                elif opcao == "2":
                    self.calibrar_sistema()
                elif opcao == "3":
                    self.testar_sistema_visao()
                elif opcao == "4":
                    self.mostrar_status_completo()
                elif opcao == "5":
                    self.parada_emergencia()
                elif opcao == "6":
                    return False  # Sinaliza que deve sair
                else:
                    print("   ‚ùå Op√ß√£o inv√°lida!")

            except KeyboardInterrupt:
                return False

    # ========== CALIBRA√á√ÉO DO SISTEMA ==========

    def calibrar_sistema(self):
        """Executa a rotina de calibra√ß√£o do sistema rob√≥tico."""
        print("\nüîß Iniciando calibra√ß√£o do sistema rob√≥tico...")

        if not (self.orquestrador and hasattr(self.orquestrador, 'calibrar_sistema')):
            print("‚ö†Ô∏è Fun√ß√£o de calibra√ß√£o n√£o implementada no orquestrador.")
            input("Pressione ENTER para voltar...")
            return

        print("‚ö†Ô∏è O rob√¥ visitar√° algumas posi√ß√µes do tabuleiro.")
        confirmacao = input("   Continuar? (s/N): ").lower().strip()

        if confirmacao.startswith('s'):
            if self.orquestrador.calibrar_sistema():
                print("‚úÖ Calibra√ß√£o conclu√≠da com sucesso!")
            else:
                print("‚ùå Falha na calibra√ß√£o!")
        else:
            print("Calibra√ß√£o cancelada.")

    # ========== TESTE DO SISTEMA DE VIS√ÉO ==========

    def testar_sistema_visao(self):
        """Testa o sistema de vis√£o de forma isolada."""
        print("\nüìπ Iniciando teste do sistema de vis√£o...")

        if not self.vision_integration:
            print("‚ùå Sistema de vis√£o n√£o dispon√≠vel.")
            input("Pressione ENTER para voltar...")
            return

        if not self.vision_integration.inicializar_sistema_visao():
            input("Pressione ENTER para voltar...")
            return

        print("\n" + "+" + "-" * 58 + "+")
        print("| üé• Janela de vis√£o aberta. Pressione 'q' na janela para fechar. |")
        print("|    - Pressione 'c' para tentar calibrar.                    |")
        print("|    - Pressione 's' para salvar um screenshot.                |")
        print("+" + "-" * 58 + "+")

        self.vision_integration.show_vision_window = True
        self.vision_integration.iniciar_visao_em_thread()

        # Aguarda a janela ser fechada
        while (self.vision_integration.vision_active and
               self.vision_integration.vision_thread.is_alive()):
            try:
                if CV2_AVAILABLE:
                    # Verifica se a janela ainda est√° aberta
                    if cv2.getWindowProperty("Tapatan Vision System", cv2.WND_PROP_VISIBLE) < 1:
                        self.vision_integration.vision_active = False
            except (cv2.error, AttributeError):
                self.vision_integration.vision_active = False
            time.sleep(0.5)

        self.vision_integration.parar_sistema_visao()
        self.vision_integration.show_vision_window = False
        print("\n‚úÖ Teste de vis√£o finalizado.")

    # ========== STATUS DO SISTEMA ==========

    def mostrar_status_completo(self):
        """Mostra o status completo do rob√¥ e da vis√£o."""
        print("\n" + "=" * 35 + "\n      üìä STATUS GERAL DO SISTEMA\n" + "=" * 35)

        # Status do orquestrador
        if self.orquestrador and hasattr(self.orquestrador, 'obter_status_completo'):
            status = self.orquestrador.obter_status_completo()
            print(f"üéÆ Orquestrador: {status.get('orquestrador', {}).get('status', 'N/A')}")
        else:
            print("  - Servi√ßo do rob√¥ n√£o dispon√≠vel ou status n√£o implementado.")

        # Status da vis√£o
        print("\nüìπ Status da Vis√£o:")
        if self.vision_integration:
            estado_visao = self.vision_integration.obter_estado_visao()
            if estado_visao.get('available'):
                print(f"  - Dispon√≠vel: Sim | Ativa: {'Sim' if estado_visao['active'] else 'N√£o'}")
                print(f"  - Calibrada: {'Sim' if estado_visao['calibrated'] else 'N√£o'}")
                print(f"  - Detec√ß√µes Atuais: {estado_visao['detections_count']}")
            else:
                print("  - Sistema de vis√£o n√£o dispon√≠vel.")
        else:
            print("  - Sistema de vis√£o n√£o inicializado.")

        print("=" * 35)
        input("\nPressione ENTER para voltar ao menu...")

    # ========== PARADA DE EMERG√äNCIA ==========

    def parada_emergencia(self):
        """Para todos os sistemas imediatamente ap√≥s confirma√ß√£o."""
        print("\n" + "üö®" * 15 + "\n      PARADA DE EMERG√äNCIA\n" + "üö®" * 15)

        confirmacao = input("‚ö†Ô∏è Confirma parada de emerg√™ncia? (s/N): ").lower().strip()

        if confirmacao.startswith('s'):
            # Para o orquestrador
            if self.orquestrador and hasattr(self.orquestrador, 'parada_emergencia'):
                self.orquestrador.parada_emergencia()

            # Para a vis√£o
            if self.vision_integration:
                self.vision_integration.parar_sistema_visao()

            print("üõë Todos os sistemas foram parados. Encerrando por seguran√ßa.")
            sys.exit(1)
        else:
            print("Parada de emerg√™ncia cancelada.")

    # ========== PREPARA√á√ÉO DO TABULEIRO ==========

    def preparar_tabuleiro_com_visao(self) -> bool:
        """
        Inicia a vis√£o e aguarda o usu√°rio preparar o tabuleiro f√≠sico.

        Returns:
            True se o usu√°rio confirmar, False se cancelar ou falhar
        """
        print("\n" + "=" * 50)
        print("    üîß PREPARA√á√ÉO DO TABULEIRO COM VIS√ÉO üîß")
        print("=" * 50)

        if not self.vision_integration:
            print("‚ùå Sistema de vis√£o n√£o dispon√≠vel.")
            return False

        if not self.vision_integration.inicializar_sistema_visao():
            print("‚ùå N√£o foi poss√≠vel iniciar a vis√£o. O jogo continuar√° sem ela.")
            return False

        self.vision_integration.show_vision_window = True
        self.vision_integration.iniciar_visao_em_thread()

        print("\n1. Posicione o tabuleiro e os marcadores de refer√™ncia.")
        print("2. Pressione 'c' na janela de vis√£o para calibrar o sistema.")
        print("3. Remova TODAS as pe√ßas do tabuleiro (deixe-o vazio).")
        print("4. Quando estiver pronto, volte para este terminal e pressione ENTER.")

        try:
            input("\n   Pressione ENTER para iniciar a partida ou CTRL+C para cancelar...")

            # Verifica se h√° pe√ßas no tabuleiro
            estado_visao = self.vision_integration.obter_estado_visao()
            if len(estado_visao['board_positions']) > 0:
                print("‚ö†Ô∏è  Aten√ß√£o: A vis√£o detectou pe√ßas no tabuleiro. O jogo espera um tabuleiro vazio.")
                confirmacao = input("   Deseja continuar mesmo assim? (s/N): ").lower().strip()
                if confirmacao != 's':
                    print("   Partida cancelada pelo usu√°rio.")
                    return False

            print("‚úÖ Tabuleiro pronto! Iniciando partida...")
            return True

        except KeyboardInterrupt:
            print("\n   Prepara√ß√£o cancelada.")
            return False